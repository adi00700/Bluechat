function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/// <reference types="cypress" />
/// <reference types="cypress-real-events" />
/// <reference types="../../../cypress/support" />

import React, { useState } from 'react';
import { EuiContextMenuItem } from '../context_menu';
import { EuiNotificationEvent } from './notification_event';
import { EuiPanel } from '../panel';
import { jsx as ___EmotionJSX } from "@emotion/react";
var NotificationEvent = function NotificationEvent() {
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isRead = _useState2[0],
    setIsRead = _useState2[1];
  var onRead = function onRead(id, isRead) {
    setIsRead(!isRead);
  };
  var onOpenContextMenu = function onOpenContextMenu(id) {
    return [___EmotionJSX(EuiContextMenuItem, {
      key: "contextMenuItemA",
      onClick: function onClick() {
        return onRead(id, isRead);
      }
    }, isRead ? 'Mark as unread' : 'Mark as read'), ___EmotionJSX(EuiContextMenuItem, {
      key: "contextMenuItemB",
      onClick: function onClick() {}
    }, "View messages like this"), ___EmotionJSX(EuiContextMenuItem, {
      key: "contextMenuItemC",
      onClick: function onClick() {}
    }, "Don\u2019t notify me about this")];
  };
  return ___EmotionJSX(EuiPanel, {
    paddingSize: "none",
    hasShadow: true,
    style: {
      maxWidth: '540px'
    }
  }, ___EmotionJSX(EuiNotificationEvent, {
    id: "cy-eui-notification-1",
    type: "Report",
    iconType: "logoKibana",
    iconAriaLabel: "Kibana",
    time: "1 min ago",
    title: "[Error Monitoring Report] is generated",
    primaryAction: "Download",
    primaryActionProps: {
      iconType: 'download'
    },
    messages: ['The reported was generated at 17:12:16 GMT+4'],
    isRead: isRead,
    onRead: onRead,
    onOpenContextMenu: onOpenContextMenu,
    onClickPrimaryAction: function onClickPrimaryAction() {},
    onClickTitle: function onClickTitle() {}
  }));
};
describe('EuiNotificationEvent', function () {
  beforeEach(function () {
    cy.viewport(1024, 768); // medium breakpoint
    cy.realMount(___EmotionJSX(NotificationEvent, null));
    cy.get('article.euiNotificationEvent').should('exist');
  });
  describe('Automated accessibility check', function () {
    it('has zero violations on first render', function () {
      cy.checkAxe();
    });
    it('has zero violations when popover is open', function () {
      cy.get('button[data-test-subj="cy-eui-notification-1-notificationEventMetaButton"]').realClick();
      cy.get('div.euiPopover__panel').should('exist');
      cy.checkAxe();
    });
    it('has zero violations after the Mark as read button is clicked', function () {
      cy.get('button[data-test-subj="cy-eui-notification-1-notificationEventMetaButton"]').realClick();
      cy.get('div.euiPopover__panel').should('exist');
      cy.get('div.euiPopover__panel button').first().realClick();
      cy.checkAxe();
    });
  });
  describe('Keyboard accessibility', function () {
    it('has zero violations when the popover is opened by keyboard', function () {
      cy.repeatRealPress('Tab');
      cy.get('button[data-test-subj="cy-eui-notification-1-notificationEventMetaButton"]').should('have.focus');
      cy.realPress('Enter');
      cy.get('div.euiPopover__panel').should('exist');
      cy.checkAxe();
      cy.realPress('Escape');
      cy.get('div.euiPopover__panel').should('not.exist');
      cy.checkAxe();
    });
  });
});