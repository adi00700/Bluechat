import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "className", "size", "heading", "defaultValue", "inputAriaLabel", "startWithEditOpen", "readModeProps", "editModeProps", "isLoading", "isInvalid", "isReadOnly"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { useMemo } from 'react';
import classNames from 'classnames';
import { EuiTitle } from '../title';
import { EuiInlineEditForm, SMALL_SIZE_FORM, MEDIUM_SIZE_FORM } from './inline_edit_form';
import { useEuiTheme } from '../../services';
import { euiInlineEditTitleStyles } from './inline_edit_title.styles';
import { jsx as ___EmotionJSX } from "@emotion/react";
export var HEADINGS = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span'];
export var EuiInlineEditTitle = function EuiInlineEditTitle(_ref) {
  var children = _ref.children,
    className = _ref.className,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'm' : _ref$size,
    heading = _ref.heading,
    defaultValue = _ref.defaultValue,
    inputAriaLabel = _ref.inputAriaLabel,
    startWithEditOpen = _ref.startWithEditOpen,
    _readModeProps = _ref.readModeProps,
    editModeProps = _ref.editModeProps,
    isLoading = _ref.isLoading,
    isInvalid = _ref.isInvalid,
    isReadOnly = _ref.isReadOnly,
    rest = _objectWithoutProperties(_ref, _excluded);
  var classes = classNames('euiInlineEditTitle', className);
  var theme = useEuiTheme();
  var styles = euiInlineEditTitleStyles(theme);
  var cssStyles = [styles.euiInlineEditTitle, styles.fontSize[size]];
  var H = heading;
  var isSmallSize = ['xxxs', 'xxs', 'xs', 's'].includes(size);
  var sizes = isSmallSize ? SMALL_SIZE_FORM : MEDIUM_SIZE_FORM;
  var readModeProps = useMemo(function () {
    if (!isReadOnly) return _readModeProps;
    var headingNumber = Number(heading.substring(1));
    return headingNumber ? _objectSpread(_objectSpread({}, _readModeProps), {}, {
      role: 'heading',
      'aria-level': headingNumber
    }) : _objectSpread(_objectSpread({}, _readModeProps), {}, {
      role: 'paragraph'
    });
  }, [_readModeProps, isReadOnly, heading]);
  var formProps = {
    sizes: sizes,
    defaultValue: defaultValue,
    inputAriaLabel: inputAriaLabel,
    startWithEditOpen: startWithEditOpen,
    readModeProps: readModeProps,
    editModeProps: editModeProps,
    isLoading: isLoading,
    isInvalid: isInvalid,
    isReadOnly: isReadOnly
  };
  return ___EmotionJSX(EuiInlineEditForm, _extends({
    css: cssStyles,
    className: classes
  }, rest, formProps), function (titleReadModeValue) {
    return ___EmotionJSX(EuiTitle, {
      size: size,
      className: "eui-textTruncate"
    }, ___EmotionJSX(H, {
      role: isReadOnly ? 'presentation' : undefined
    }, titleReadModeValue));
  });
};