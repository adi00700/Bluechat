import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["startControl", "endControl", "delimiter", "className"];
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { cloneElement } from 'react';
import classNames from 'classnames';
import { useEuiI18n } from '../../i18n';
import { EuiIcon } from '../../icon';
import { EuiText } from '../../text';
import { EuiFormControlLayout } from './form_control_layout';
import { jsx as ___EmotionJSX } from "@emotion/react";
export var EuiFormControlLayoutDelimited = function EuiFormControlLayoutDelimited(_ref) {
  var startControl = _ref.startControl,
    endControl = _ref.endControl,
    delimiter = _ref.delimiter,
    className = _ref.className,
    rest = _objectWithoutProperties(_ref, _excluded);
  var isInvalid = rest.isInvalid,
    isDisabled = rest.isDisabled,
    readOnly = rest.readOnly;
  var showInvalidState = isInvalid && !isDisabled && !readOnly;
  var classes = classNames('euiFormControlLayoutDelimited', className, {
    'euiFormControlLayoutDelimited--isInvalid': showInvalidState
  });
  return ___EmotionJSX(EuiFormControlLayout, _extends({
    className: classes,
    iconsPosition: "static"
  }, rest), addClassesToControl(startControl), ___EmotionJSX(EuiFormControlDelimiter, {
    delimiter: delimiter,
    isInvalid: showInvalidState
  }), addClassesToControl(endControl));
};
var addClassesToControl = function addClassesToControl(control) {
  return /*#__PURE__*/cloneElement(control, {
    className: classNames(control.props.className, 'euiFormControlLayoutDelimited__input')
  });
};
var EuiFormControlDelimiter = function EuiFormControlDelimiter(_ref2) {
  var delimiter = _ref2.delimiter,
    isInvalid = _ref2.isInvalid;
  var defaultAriaLabel = useEuiI18n('euiFormControlLayoutDelimited.delimiterLabel', 'to');
  return ___EmotionJSX(EuiText, {
    className: "euiFormControlLayoutDelimited__delimiter",
    size: "s",
    color: isInvalid ? 'danger' : 'subdued'
  }, delimiter !== null && delimiter !== void 0 ? delimiter : ___EmotionJSX(EuiIcon, {
    type: "sortRight",
    "aria-label": defaultAriaLabel
  }));
};