import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["children", "icon", "iconsPosition", "clear", "fullWidth", "isLoading", "isDisabled", "compressed", "className", "prepend", "append", "readOnly", "isInvalid", "isDropdown", "inputId"];
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { cloneElement, Component } from 'react';
import classNames from 'classnames';
import { EuiFormControlLayoutIcons } from './form_control_layout_icons';
import { EuiFormLabel } from '../form_label';
import { FormContext } from '../eui_form_context';
import { jsx as ___EmotionJSX } from "@emotion/react";
export var EuiFormControlLayout = /*#__PURE__*/function (_Component) {
  _inherits(EuiFormControlLayout, _Component);
  var _super = _createSuper(EuiFormControlLayout);
  function EuiFormControlLayout() {
    var _this;
    _classCallCheck(this, EuiFormControlLayout);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "renderLeftIcons", function () {
      var _this$props = _this.props,
        icon = _this$props.icon,
        iconsPosition = _this$props.iconsPosition,
        compressed = _this$props.compressed;
      var leftCustomIcon = icon && (icon === null || icon === void 0 ? void 0 : icon.side) !== 'right' ? icon : undefined;
      return leftCustomIcon ? ___EmotionJSX(EuiFormControlLayoutIcons, {
        side: "left",
        icon: leftCustomIcon,
        iconsPosition: iconsPosition,
        compressed: compressed
      }) : null;
    });
    _defineProperty(_assertThisInitialized(_this), "renderRightIcons", function () {
      var _this$props2 = _this.props,
        icon = _this$props2.icon,
        iconsPosition = _this$props2.iconsPosition,
        clear = _this$props2.clear,
        compressed = _this$props2.compressed,
        isLoading = _this$props2.isLoading,
        isInvalid = _this$props2.isInvalid,
        isDisabled = _this$props2.isDisabled,
        readOnly = _this$props2.readOnly,
        isDropdown = _this$props2.isDropdown;
      var hasDropdownIcon = !readOnly && !isDisabled && isDropdown;
      var rightCustomIcon = icon && (icon === null || icon === void 0 ? void 0 : icon.side) === 'right' ? icon : undefined;
      var hasRightIcons = rightCustomIcon || clear || isLoading || isInvalid || hasDropdownIcon;
      return hasRightIcons ? ___EmotionJSX(EuiFormControlLayoutIcons, {
        side: "right",
        icon: rightCustomIcon,
        iconsPosition: iconsPosition,
        compressed: compressed,
        clear: clear,
        isLoading: isLoading,
        isInvalid: isInvalid,
        isDropdown: hasDropdownIcon
      }) : null;
    });
    return _this;
  }
  _createClass(EuiFormControlLayout, [{
    key: "render",
    value: function render() {
      var _ref = this.context,
        defaultFullWidth = _ref.defaultFullWidth;
      var _this$props3 = this.props,
        children = _this$props3.children,
        icon = _this$props3.icon,
        iconsPosition = _this$props3.iconsPosition,
        clear = _this$props3.clear,
        _this$props3$fullWidt = _this$props3.fullWidth,
        fullWidth = _this$props3$fullWidt === void 0 ? defaultFullWidth : _this$props3$fullWidt,
        isLoading = _this$props3.isLoading,
        isDisabled = _this$props3.isDisabled,
        compressed = _this$props3.compressed,
        className = _this$props3.className,
        prepend = _this$props3.prepend,
        append = _this$props3.append,
        readOnly = _this$props3.readOnly,
        isInvalid = _this$props3.isInvalid,
        isDropdown = _this$props3.isDropdown,
        inputId = _this$props3.inputId,
        rest = _objectWithoutProperties(_this$props3, _excluded);
      var classes = classNames('euiFormControlLayout', {
        'euiFormControlLayout--fullWidth': fullWidth,
        'euiFormControlLayout--compressed': compressed,
        'euiFormControlLayout--readOnly': readOnly,
        'euiFormControlLayout--group': prepend || append,
        'euiFormControlLayout-isDisabled': isDisabled
      }, className);
      var prependNodes = this.renderSideNode('prepend', prepend, inputId);
      var appendNodes = this.renderSideNode('append', append, inputId);
      return ___EmotionJSX("div", _extends({
        className: classes
      }, rest), prependNodes, ___EmotionJSX("div", {
        className: "euiFormControlLayout__childrenWrapper"
      }, this.renderLeftIcons(), children, this.renderRightIcons()), appendNodes);
    }
  }, {
    key: "renderSideNode",
    value: function renderSideNode(side, nodes, inputId) {
      var _this2 = this;
      if (!nodes) {
        return;
      }
      if (typeof nodes === 'string') {
        return this.createFormLabel(side, nodes, inputId);
      }
      var appendNodes = React.Children.map(nodes, function (item, index) {
        return typeof item === 'string' ? _this2.createFormLabel(side, item, inputId) : _this2.createSideNode(side, item, index);
      });
      return appendNodes;
    }
  }, {
    key: "createFormLabel",
    value: function createFormLabel(side, string, inputId) {
      return ___EmotionJSX(EuiFormLabel, {
        htmlFor: inputId,
        className: "euiFormControlLayout__".concat(side)
      }, string);
    }
  }, {
    key: "createSideNode",
    value: function createSideNode(side, node, key) {
      return /*#__PURE__*/cloneElement(node, {
        className: classNames("euiFormControlLayout__".concat(side), node.props.className),
        key: key
      });
    }
  }]);
  return EuiFormControlLayout;
}(Component);
_defineProperty(EuiFormControlLayout, "contextType", FormContext);