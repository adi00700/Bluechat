import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _get from "@babel/runtime/helpers/get";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { useCallback, useContext, useEffect, useMemo, useState } from 'react';
import { useForceRender, useLatest } from '../../../services';
import { isNumber, isObject } from '../../../services/predicate';
import { DataGridSortingContext } from './sorting';

// TODO: Once JS variables are available, use them here instead of hard-coded maps
export var cellPaddingsMap = {
  s: 4,
  m: 6,
  l: 8
};
export var AUTO_HEIGHT = 'auto';
export var DEFAULT_ROW_HEIGHT = 34;
export var RowHeightUtils = /*#__PURE__*/function () {
  function RowHeightUtils() {
    var _this = this;
    _classCallCheck(this, RowHeightUtils);
    /**
     * Styles utils
     */
    _defineProperty(this, "styles", {
      paddingTop: 0,
      paddingBottom: 0
    });
    _defineProperty(this, "getStylesForCell", function (rowHeightsOptions, rowIndex) {
      var height = _this.getRowHeightOption(rowIndex, rowHeightsOptions);
      if (height === AUTO_HEIGHT) {
        return {};
      }
      var lineCount = _this.getLineCount(height);
      if (lineCount) {
        return {
          WebkitLineClamp: lineCount,
          display: '-webkit-box',
          WebkitBoxOrient: 'vertical',
          height: '100%',
          overflow: 'hidden'
        };
      }
      return {
        height: '100%',
        overflow: 'hidden'
      };
    });
    /**
     * Heights cache utils
     * This cache is primarily used by auto heights & secondarily used by lineCount row overrides
     */
    _defineProperty(this, "heightsCache", new Map());
  }
  _createClass(RowHeightUtils, [{
    key: "getRowHeightOption",
    value: function getRowHeightOption(rowIndex, rowHeightsOptions) {
      var _rowHeightsOptions$ro, _rowHeightsOptions$ro2;
      return (_rowHeightsOptions$ro = rowHeightsOptions === null || rowHeightsOptions === void 0 ? void 0 : (_rowHeightsOptions$ro2 = rowHeightsOptions.rowHeights) === null || _rowHeightsOptions$ro2 === void 0 ? void 0 : _rowHeightsOptions$ro2[rowIndex]) !== null && _rowHeightsOptions$ro !== void 0 ? _rowHeightsOptions$ro : rowHeightsOptions === null || rowHeightsOptions === void 0 ? void 0 : rowHeightsOptions.defaultHeight;
    }
  }, {
    key: "isRowHeightOverride",
    value: function isRowHeightOverride(rowIndex, rowHeightsOptions) {
      var _rowHeightsOptions$ro3;
      return (rowHeightsOptions === null || rowHeightsOptions === void 0 ? void 0 : (_rowHeightsOptions$ro3 = rowHeightsOptions.rowHeights) === null || _rowHeightsOptions$ro3 === void 0 ? void 0 : _rowHeightsOptions$ro3[rowIndex]) != null;
    }
  }, {
    key: "getCalculatedHeight",
    value: function getCalculatedHeight(heightOption, defaultHeight, rowIndex, isRowHeightOverride) {
      if (isObject(heightOption) && heightOption.height) {
        return Math.max(heightOption.height, defaultHeight);
      }
      if (heightOption && isNumber(heightOption)) {
        return Math.max(heightOption, defaultHeight);
      }
      if (isObject(heightOption) && heightOption.lineCount) {
        if (isRowHeightOverride) {
          return this.getRowHeight(rowIndex) || defaultHeight; // lineCount overrides are stored in the heights cache
        } else {
          return defaultHeight; // default lineCount height is set in minRowHeight state in grid_row_body
        }
      }

      if (heightOption === AUTO_HEIGHT && rowIndex != null) {
        return this.getRowHeight(rowIndex);
      }
      return defaultHeight;
    }
  }, {
    key: "cacheStyles",
    value: function cacheStyles(gridStyles) {
      this.styles = {
        paddingTop: cellPaddingsMap[gridStyles.cellPadding || 'm'],
        paddingBottom: cellPaddingsMap[gridStyles.cellPadding || 'm']
      };
    }
  }, {
    key: "getLineCount",
    value:
    /**
     * Line count utils
     */

    function getLineCount(option) {
      return isObject(option) ? option.lineCount : undefined;
    }
  }, {
    key: "calculateHeightForLineCount",
    value: function calculateHeightForLineCount(cellRef, lineCount, excludePadding) {
      var computedStyles = window.getComputedStyle(cellRef, null);
      var lineHeight = parseInt(computedStyles.lineHeight, 10);
      var contentHeight = Math.ceil(lineCount * lineHeight);
      return excludePadding ? contentHeight : contentHeight + this.styles.paddingTop + this.styles.paddingBottom;
    }

    /**
     * Auto height utils
     */
  }, {
    key: "isAutoHeight",
    value: function isAutoHeight(rowIndex, rowHeightsOptions) {
      var height = this.getRowHeightOption(rowIndex, rowHeightsOptions);
      if (height === AUTO_HEIGHT) {
        return true;
      }
      return false;
    }
  }, {
    key: "getRowHeight",
    value: function getRowHeight(rowIndex) {
      var rowHeights = this.heightsCache.get(rowIndex);
      if (rowHeights == null) return 0;
      var rowHeightValues = Array.from(rowHeights.values());
      if (!rowHeightValues.length) return 0;
      return Math.max.apply(Math, rowHeightValues);
    }
  }, {
    key: "setRowHeight",
    value: function setRowHeight(rowIndex, colId) {
      var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ROW_HEIGHT;
      var _visibleRowIndex = arguments.length > 3 ? arguments[3] : undefined;
      var rowHeights = this.heightsCache.get(rowIndex) || new Map();
      var adaptedHeight = Math.ceil(height + this.styles.paddingTop + this.styles.paddingBottom);
      if (rowHeights.get(colId) === adaptedHeight) {
        return false;
      } else {
        rowHeights.set(colId, adaptedHeight);
        this.heightsCache.set(rowIndex, rowHeights);
        return true;
      }
    }
  }, {
    key: "pruneHiddenColumnHeights",
    value: function pruneHiddenColumnHeights(visibleColumns) {
      var visibleColumnIds = new Set(visibleColumns.map(function (_ref) {
        var id = _ref.id;
        return id;
      }));
      var didModify = false;
      this.heightsCache.forEach(function (rowHeights) {
        var existingColumnIds = Array.from(rowHeights.keys());
        existingColumnIds.forEach(function (existingColumnId) {
          if (visibleColumnIds.has(existingColumnId) === false) {
            didModify = true;
            rowHeights.delete(existingColumnId);
          }
        });
      });
      return didModify;
    }
  }]);
  return RowHeightUtils;
}();

/**
 * Row height utils with virtualization library-specific APIs
 */
export var RowHeightVirtualizationUtils = /*#__PURE__*/function (_RowHeightUtils) {
  _inherits(RowHeightVirtualizationUtils, _RowHeightUtils);
  var _super = _createSuper(RowHeightVirtualizationUtils);
  function RowHeightVirtualizationUtils(gridRef, outerGridElementRef, gridItemsRenderedRef, rerenderGridBodyRef) {
    var _this2;
    _classCallCheck(this, RowHeightVirtualizationUtils);
    _this2 = _super.call(this);
    _this2.gridRef = gridRef;
    _this2.outerGridElementRef = outerGridElementRef;
    _this2.gridItemsRenderedRef = gridItemsRenderedRef;
    _this2.rerenderGridBodyRef = rerenderGridBodyRef;
    /**
     * Virtualization workarounds for auto height rows
     */
    _defineProperty(_assertThisInitialized(_this2), "timerId", void 0);
    _defineProperty(_assertThisInitialized(_this2), "lastUpdatedRow", Infinity);
    return _this2;
  }
  _createClass(RowHeightVirtualizationUtils, [{
    key: "setRowHeight",
    value: function setRowHeight(rowIndex, colId) {
      var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ROW_HEIGHT;
      var visibleRowIndex = arguments.length > 3 ? arguments[3] : undefined;
      var didModify = _get(_getPrototypeOf(RowHeightVirtualizationUtils.prototype), "setRowHeight", this).call(this, rowIndex, colId, height, visibleRowIndex);

      // When an auto row height is updated, force a re-render
      // of the grid body to update the unconstrained height
      if (didModify) {
        var _this$rerenderGridBod, _this$rerenderGridBod2;
        (_this$rerenderGridBod = (_this$rerenderGridBod2 = this.rerenderGridBodyRef).current) === null || _this$rerenderGridBod === void 0 ? void 0 : _this$rerenderGridBod.call(_this$rerenderGridBod2);
        this.resetRow(visibleRowIndex);
      }
      return didModify; // Mostly just here for typing
    }
  }, {
    key: "pruneHiddenColumnHeights",
    value: function pruneHiddenColumnHeights(visibleColumns) {
      var didModify = _get(_getPrototypeOf(RowHeightVirtualizationUtils.prototype), "pruneHiddenColumnHeights", this).call(this, visibleColumns);
      if (didModify) {
        this.resetRow(0);
      }
      return didModify; // Mostly just here for typing
    }
  }, {
    key: "resetRow",
    value: function resetRow(visibleRowIndex) {
      var _this3 = this;
      // save the first row index of batch, reassigning it only
      // if this visible row index less than lastUpdatedRow
      this.lastUpdatedRow = Math.min(this.lastUpdatedRow, visibleRowIndex);
      clearTimeout(this.timerId);
      this.timerId = window.setTimeout(function () {
        return _this3.resetGrid();
      }, 0);
    }
  }, {
    key: "resetGrid",
    value: function resetGrid() {
      var _this$gridRef$current;
      (_this$gridRef$current = this.gridRef.current) === null || _this$gridRef$current === void 0 ? void 0 : _this$gridRef$current.resetAfterRowIndex(this.lastUpdatedRow);
      this.lastUpdatedRow = Infinity;
    }
  }, {
    key: "compensateForLayoutShift",
    value: function compensateForLayoutShift(rowIndex, verticalLayoutShift, anchorRow) {
      var grid = this.gridRef.current;
      var outerGridElement = this.outerGridElementRef.current;
      var renderedItems = this.gridItemsRenderedRef.current;
      if (grid == null || outerGridElement == null || renderedItems == null || anchorRow == null || !Number.isFinite(verticalLayoutShift)) {
        return;
      }

      // skip if the start row is the anchor row but it hasn't shifted
      if (anchorRow === 'start' && renderedItems.visibleRowStartIndex !== rowIndex) {
        return;
      }

      // skip if the center row is the anchor row but it hasn't shifted
      if (anchorRow === 'center' && Math.floor((renderedItems.visibleRowStopIndex - renderedItems.visibleRowStartIndex) / 2) !== rowIndex) {
        return;
      }
      grid.scrollTo({
        scrollTop: outerGridElement.scrollTop + verticalLayoutShift
      });
    }
  }]);
  return RowHeightVirtualizationUtils;
}(RowHeightUtils);

/**
 * Hook for instantiating RowHeightUtils, setting internal class vars,
 * and setting up various row-height-related side effects
 */
export var useRowHeightUtils = function useRowHeightUtils(_ref2) {
  var virtualization = _ref2.virtualization,
    rowHeightsOptions = _ref2.rowHeightsOptions,
    gridStyles = _ref2.gridStyles,
    columns = _ref2.columns;
  var forceRenderRef = useLatest(useForceRender());
  var _useState = useState(function () {
      if (virtualization) {
        var _gridRef = virtualization.gridRef,
          _outerGridElementRef = virtualization.outerGridElementRef,
          _gridItemsRenderedRef = virtualization.gridItemsRenderedRef;
        return new RowHeightVirtualizationUtils(_gridRef, _outerGridElementRef, _gridItemsRenderedRef, forceRenderRef);
      } else {
        return new RowHeightUtils();
      }
    }),
    _useState2 = _slicedToArray(_useState, 1),
    rowHeightUtils = _useState2[0];

  // Forces a rerender whenever the row heights change, as this can cause the
  // grid to change height/have scrollbars. Without this, grid rerendering is stale
  useEffect(function () {
    if (forceRenderRef.current == null) {
      return;
    }
    requestAnimationFrame(forceRenderRef.current);
  }, [// Effects that should cause rerendering
  rowHeightsOptions === null || rowHeightsOptions === void 0 ? void 0 : rowHeightsOptions.defaultHeight, rowHeightsOptions === null || rowHeightsOptions === void 0 ? void 0 : rowHeightsOptions.rowHeights,
  // Dependencies
  rowHeightUtils, forceRenderRef]);

  // Re-cache styles whenever grid density changes
  useEffect(function () {
    rowHeightUtils.cacheStyles({
      cellPadding: gridStyles.cellPadding
    });
  }, [gridStyles.cellPadding, rowHeightUtils]);

  // Update row heights map to remove hidden columns whenever orderedVisibleColumns change
  useEffect(function () {
    rowHeightUtils.pruneHiddenColumnHeights(columns);
  }, [rowHeightUtils, columns]);
  return rowHeightUtils;
};
export var useDefaultRowHeight = function useDefaultRowHeight(_ref3) {
  var rowHeightsOptions = _ref3.rowHeightsOptions,
    rowHeightUtils = _ref3.rowHeightUtils;
  var _useContext = useContext(DataGridSortingContext),
    getCorrectRowIndex = _useContext.getCorrectRowIndex;

  // `minRowHeight` is primarily used by undefined & lineCount heights
  // and ignored by auto & static heights (unless the static height is < the min)
  var _useState3 = useState(DEFAULT_ROW_HEIGHT),
    _useState4 = _slicedToArray(_useState3, 2),
    minRowHeight = _useState4[0],
    setRowHeight = _useState4[1];

  // Default/fallback height for all rows
  var defaultRowHeight = useMemo(function () {
    return rowHeightsOptions !== null && rowHeightsOptions !== void 0 && rowHeightsOptions.defaultHeight ? rowHeightUtils.getCalculatedHeight(rowHeightsOptions.defaultHeight, minRowHeight) : minRowHeight;
  }, [rowHeightsOptions, minRowHeight, rowHeightUtils]);

  // Used by react-window's Grid component to determine actual row heights
  var getRowHeight = useCallback(function (rowIndex) {
    var correctRowIndex = getCorrectRowIndex(rowIndex);
    var rowHeight;

    // Account for row-specific height overrides
    var rowHeightOption = rowHeightUtils.getRowHeightOption(correctRowIndex, rowHeightsOptions);
    if (rowHeightOption) {
      rowHeight = rowHeightUtils.getCalculatedHeight(rowHeightOption, minRowHeight, correctRowIndex, rowHeightUtils.isRowHeightOverride(correctRowIndex, rowHeightsOptions));
    }

    // Use the row-specific height if it exists, if not, fall back to the default
    return rowHeight || defaultRowHeight;
  }, [minRowHeight, rowHeightsOptions, getCorrectRowIndex, rowHeightUtils, defaultRowHeight]);
  return {
    defaultRowHeight: defaultRowHeight,
    setRowHeight: setRowHeight,
    getRowHeight: getRowHeight
  };
};