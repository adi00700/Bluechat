import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { createContext, useState, useCallback } from 'react';
import classNames from 'classnames';
import { keys } from '../../../services';
import { EuiWrappingPopover } from '../../popover';
export var DataGridCellPopoverContext = /*#__PURE__*/createContext({
  popoverIsOpen: false,
  cellLocation: {
    rowIndex: 0,
    colIndex: 0
  },
  openCellPopover: function openCellPopover() {},
  closeCellPopover: function closeCellPopover() {},
  setPopoverAnchor: function setPopoverAnchor() {},
  setPopoverContent: function setPopoverContent() {},
  setCellPopoverProps: function setCellPopoverProps() {}
});
export var useCellPopover = function useCellPopover() {
  var _cellPopoverProps$pan;
  // Current open state & cell location are handled here
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    popoverIsOpen = _useState2[0],
    setPopoverIsOpen = _useState2[1];
  var _useState3 = useState({
      rowIndex: 0,
      colIndex: 0
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    cellLocation = _useState4[0],
    setCellLocation = _useState4[1];
  // Popover anchor & content are passed by individual `EuiDataGridCell`s
  var _useState5 = useState(null),
    _useState6 = _slicedToArray(_useState5, 2),
    popoverAnchor = _useState6[0],
    setPopoverAnchor = _useState6[1];
  var _useState7 = useState(),
    _useState8 = _slicedToArray(_useState7, 2),
    popoverContent = _useState8[0],
    setPopoverContent = _useState8[1];
  // Allow customization of most (not all) popover props by consumers
  var _useState9 = useState({}),
    _useState10 = _slicedToArray(_useState9, 2),
    cellPopoverProps = _useState10[0],
    setCellPopoverProps = _useState10[1];
  var closeCellPopover = useCallback(function () {
    return setPopoverIsOpen(false);
  }, []);
  var openCellPopover = useCallback(function (_ref) {
    var rowIndex = _ref.rowIndex,
      colIndex = _ref.colIndex;
    // Prevent popover DOM issues when re-opening the same popover
    if (popoverIsOpen && rowIndex === cellLocation.rowIndex && colIndex === cellLocation.colIndex) {
      return;
    }

    // Toggle our open cell state, which causes EuiDataGridCells to react/check
    // if they should be the open popover and send their anchor+content if so
    setPopoverAnchor(null); // Resetting the anchor node is required for rerendering to work correctly
    setCellLocation({
      rowIndex: rowIndex,
      colIndex: colIndex
    });
    setPopoverIsOpen(true);
  }, [popoverIsOpen, cellLocation]);
  var cellPopoverContext = {
    popoverIsOpen: popoverIsOpen,
    closeCellPopover: closeCellPopover,
    openCellPopover: openCellPopover,
    cellLocation: cellLocation,
    setPopoverAnchor: setPopoverAnchor,
    setPopoverContent: setPopoverContent,
    setCellPopoverProps: setCellPopoverProps
  };

  // Note that this popover is rendered once at the top grid level, rather than one popover per cell
  var cellPopover = popoverIsOpen && popoverAnchor && ___EmotionJSX(EuiWrappingPopover, _extends({
    isOpen: popoverIsOpen,
    display: "block",
    hasArrow: false,
    panelPaddingSize: "s"
  }, cellPopoverProps, {
    panelProps: _objectSpread({
      'data-test-subj': 'euiDataGridExpansionPopover'
    }, cellPopoverProps.panelProps || {}),
    panelClassName: classNames('euiDataGridRowCell__popover', cellPopoverProps.panelClassName, (_cellPopoverProps$pan = cellPopoverProps.panelProps) === null || _cellPopoverProps$pan === void 0 ? void 0 : _cellPopoverProps$pan.className),
    onKeyDown: function onKeyDown(event) {
      if (event.key === keys.F2 || event.key === keys.ESCAPE) {
        event.preventDefault();
        event.stopPropagation();
        closeCellPopover();
        // Ensure focus is returned to the parent cell
        requestAnimationFrame(function () {
          return popoverAnchor.parentElement.focus();
        });
      }
    },
    button: popoverAnchor,
    closePopover: closeCellPopover
  }), popoverContent);
  return {
    cellPopoverContext: cellPopoverContext,
    cellPopover: cellPopover
  };
};

/**
 * Popover content renderers
 */
import { EuiText } from '../../text';
import { EuiCodeBlock } from '../../code';
import { jsx as ___EmotionJSX } from "@emotion/react";
export var DefaultCellPopover = function DefaultCellPopover(_ref2) {
  var schema = _ref2.schema,
    cellActions = _ref2.cellActions,
    children = _ref2.children,
    cellContentsElement = _ref2.cellContentsElement;
  switch (schema) {
    case 'json':
      return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(JsonPopoverContent, {
        cellText: cellContentsElement.innerText
      }), cellActions);
    default:
      return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(EuiText, null, children), cellActions);
  }
};
export var JsonPopoverContent = function JsonPopoverContent(_ref3) {
  var cellText = _ref3.cellText;
  var formattedText = cellText;
  try {
    formattedText = JSON.stringify(JSON.parse(formattedText), null, 2);
  } catch (e) {}
  return ___EmotionJSX(EuiCodeBlock, {
    isCopyable: true,
    transparentBackground: true,
    paddingSize: "none",
    language: "json"
  }, formattedText);
};