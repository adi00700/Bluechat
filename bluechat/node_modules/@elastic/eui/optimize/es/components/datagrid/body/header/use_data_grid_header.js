import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["handleHeaderMutation"];
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { useState, useMemo } from 'react';
import { useMutationObserver } from '../../../observer/mutation_observer';
import { useResizeObserver } from '../../../observer/resize_observer';
import { useHeaderFocusWorkaround } from '../../utils/focus';
import { EuiDataGridHeaderRow } from './data_grid_header_row';
import { jsx as ___EmotionJSX } from "@emotion/react";
/**
 * DRY out setting up the grid header and its refs & observers
 */
export var useDataGridHeader = function useDataGridHeader(_ref) {
  var handleHeaderMutation = _ref.handleHeaderMutation,
    props = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    headerRowRef = _useState2[0],
    setHeaderRowRef = _useState2[1];
  useMutationObserver(headerRowRef, handleHeaderMutation, {
    subtree: true,
    childList: true
  });
  var _useResizeObserver = useResizeObserver(headerRowRef, 'height'),
    headerRowHeight = _useResizeObserver.height;
  var headerRow = useMemo(function () {
    return ___EmotionJSX(EuiDataGridHeaderRow, _extends({
      ref: setHeaderRowRef
    }, props));
  }, Object.values(props)); // eslint-disable-line react-hooks/exhaustive-deps

  useHeaderFocusWorkaround(props.headerIsInteractive);
  return {
    headerRow: headerRow,
    headerRowHeight: headerRowHeight
  };
};