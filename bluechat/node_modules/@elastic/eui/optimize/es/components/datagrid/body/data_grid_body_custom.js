import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
var _excluded = ["colIndex", "visibleRowIndex"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { useState, useMemo, useCallback } from 'react';
import classNames from 'classnames';
import { useDefaultColumnWidth, useColumnWidths } from '../utils/col_widths';
import { useRowHeightUtils, useDefaultRowHeight } from '../utils/row_heights';
import { useDataGridHeader } from './header';
import { useDataGridFooter } from './footer';
import { Cell } from './data_grid_cell_wrapper';
import { jsx as ___EmotionJSX } from "@emotion/react";
export var EuiDataGridBodyCustomRender = function EuiDataGridBodyCustomRender(_ref) {
  var renderCustomGridBody = _ref.renderCustomGridBody,
    leadingControlColumns = _ref.leadingControlColumns,
    trailingControlColumns = _ref.trailingControlColumns,
    columns = _ref.columns,
    visibleColCount = _ref.visibleColCount,
    schema = _ref.schema,
    schemaDetectors = _ref.schemaDetectors,
    visibleRows = _ref.visibleRows,
    renderCellValue = _ref.renderCellValue,
    renderCellPopover = _ref.renderCellPopover,
    renderFooterCellValue = _ref.renderFooterCellValue,
    interactiveCellId = _ref.interactiveCellId,
    headerIsInteractive = _ref.headerIsInteractive,
    handleHeaderMutation = _ref.handleHeaderMutation,
    setVisibleColumns = _ref.setVisibleColumns,
    switchColumnPos = _ref.switchColumnPos,
    onColumnResize = _ref.onColumnResize,
    gridWidth = _ref.gridWidth,
    gridStyles = _ref.gridStyles,
    pagination = _ref.pagination,
    rowHeightsOptions = _ref.rowHeightsOptions;
  /**
   * Columns & widths
   */
  var visibleColumns = useMemo(function () {
    return [].concat(_toConsumableArray(leadingControlColumns), _toConsumableArray(columns), _toConsumableArray(trailingControlColumns));
  }, [columns, leadingControlColumns, trailingControlColumns]);

  // compute the default column width from the container's width and count of visible columns
  var defaultColumnWidth = useDefaultColumnWidth(gridWidth, leadingControlColumns, trailingControlColumns, columns);
  var _useColumnWidths = useColumnWidths({
      columns: columns,
      leadingControlColumns: leadingControlColumns,
      trailingControlColumns: trailingControlColumns,
      defaultColumnWidth: defaultColumnWidth,
      onColumnResize: onColumnResize
    }),
    columnWidths = _useColumnWidths.columnWidths,
    setColumnWidth = _useColumnWidths.setColumnWidth;

  /**
   * Row heights
   */
  var rowHeightUtils = useRowHeightUtils({
    rowHeightsOptions: rowHeightsOptions,
    gridStyles: gridStyles,
    columns: columns
  });
  var _useDefaultRowHeight = useDefaultRowHeight({
      rowHeightsOptions: rowHeightsOptions,
      rowHeightUtils: rowHeightUtils
    }),
    setRowHeight = _useDefaultRowHeight.setRowHeight,
    getRowHeight = _useDefaultRowHeight.getRowHeight;

  /**
   * Header & footer
   */
  var _useDataGridHeader = useDataGridHeader({
      headerIsInteractive: headerIsInteractive,
      handleHeaderMutation: handleHeaderMutation,
      switchColumnPos: switchColumnPos,
      setVisibleColumns: setVisibleColumns,
      leadingControlColumns: leadingControlColumns,
      trailingControlColumns: trailingControlColumns,
      columns: columns,
      columnWidths: columnWidths,
      defaultColumnWidth: defaultColumnWidth,
      setColumnWidth: setColumnWidth,
      schema: schema,
      schemaDetectors: schemaDetectors
    }),
    headerRow = _useDataGridHeader.headerRow;
  var _useDataGridFooter = useDataGridFooter({
      renderFooterCellValue: renderFooterCellValue,
      renderCellPopover: renderCellPopover,
      rowIndex: visibleRows.visibleRowCount,
      visibleRowIndex: visibleRows.visibleRowCount,
      interactiveCellId: interactiveCellId,
      leadingControlColumns: leadingControlColumns,
      trailingControlColumns: trailingControlColumns,
      columns: columns,
      columnWidths: columnWidths,
      defaultColumnWidth: defaultColumnWidth,
      schema: schema
    }),
    footerRow = _useDataGridFooter.footerRow;

  /**
   * Cell render fn
   */
  var cellProps = {
    schema: schema,
    schemaDetectors: schemaDetectors,
    pagination: pagination,
    columns: columns,
    leadingControlColumns: leadingControlColumns,
    trailingControlColumns: trailingControlColumns,
    visibleColCount: visibleColCount,
    columnWidths: columnWidths,
    defaultColumnWidth: defaultColumnWidth,
    renderCellValue: renderCellValue,
    renderCellPopover: renderCellPopover,
    interactiveCellId: interactiveCellId,
    setRowHeight: setRowHeight,
    rowHeightsOptions: rowHeightsOptions,
    rowHeightUtils: rowHeightUtils
  };
  var _Cell = useCallback(function (_ref2) {
    var colIndex = _ref2.colIndex,
      visibleRowIndex = _ref2.visibleRowIndex,
      rest = _objectWithoutProperties(_ref2, _excluded);
    var style = {
      height: rowHeightUtils.isAutoHeight(visibleRowIndex, rowHeightsOptions) ? 'auto' : getRowHeight(visibleRowIndex)
    };
    var props = _objectSpread({
      colIndex: colIndex,
      visibleRowIndex: visibleRowIndex,
      style: style
    }, cellProps);
    return ___EmotionJSX(Cell, _extends({}, props, rest));
  }, [].concat(_toConsumableArray(Object.values(cellProps)), [getRowHeight]) // eslint-disable-line react-hooks/exhaustive-deps
  );

  // Allow consumers to pass custom props/attributes/listeners etc. to the wrapping div
  var _useState = useState({}),
    _useState2 = _slicedToArray(_useState, 2),
    customGridBodyProps = _useState2[0],
    setCustomGridBodyProps = _useState2[1];
  return ___EmotionJSX("div", _extends({}, customGridBodyProps, {
    className: classNames('euiDataGrid__customRenderBody', customGridBodyProps === null || customGridBodyProps === void 0 ? void 0 : customGridBodyProps.className)
  }), headerRow, renderCustomGridBody({
    visibleColumns: visibleColumns,
    visibleRowData: visibleRows,
    Cell: _Cell,
    setCustomGridBodyProps: setCustomGridBodyProps
  }), footerRow);
};