/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { useRef, useCallback, useEffect } from 'react';
export var useRowManager = function useRowManager(_ref) {
  var innerGridRef = _ref.innerGridRef,
    rowClasses = _ref.rowClasses;
  var rowIdToElements = useRef(new Map());
  var getRow = useCallback(function (_ref2) {
    var rowIndex = _ref2.rowIndex,
      visibleRowIndex = _ref2.visibleRowIndex,
      top = _ref2.top,
      height = _ref2.height;
    var rowElement = rowIdToElements.current.get(rowIndex);
    if (rowElement == null) {
      rowElement = document.createElement('div');
      rowElement.setAttribute('role', 'row');
      rowElement.dataset.gridRowIndex = String(rowIndex); // Row index from data, affected by sorting/pagination
      rowElement.dataset.gridVisibleRowIndex = String(visibleRowIndex); // Affected by sorting/pagination
      rowElement.classList.add('euiDataGridRow');
      if (rowClasses !== null && rowClasses !== void 0 && rowClasses[rowIndex]) {
        rowElement.classList.add(rowClasses[rowIndex]);
      }
      var isOddRow = visibleRowIndex % 2 !== 0;
      if (isOddRow) rowElement.classList.add('euiDataGridRow--striped');
      rowElement.style.position = 'absolute';
      rowElement.style.left = '0';
      rowElement.style.right = '0';

      // In order for the rowElement's left and right position to correctly inherit
      // from the innerGrid width, we need to make its position relative
      innerGridRef.current.style.position = 'relative';

      // add the element to the grid
      innerGridRef.current.appendChild(rowElement);

      // add the element to the row map
      rowIdToElements.current.set(rowIndex, rowElement);

      // watch the row's children, if they all disappear then remove this row
      var observer = new MutationObserver(function (records) {
        if (records[0].target.childElementCount === 0) {
          var _rowElement;
          observer.disconnect();
          (_rowElement = rowElement) === null || _rowElement === void 0 ? void 0 : _rowElement.remove();
          rowIdToElements.current.delete(rowIndex);
        }
      });
      observer.observe(rowElement, {
        childList: true
      });
    }

    // Ensure that the row's dimensions are always correct by having each cell update position styles
    rowElement.style.top = top;
    rowElement.style.height = "".concat(height, "px");
    return rowElement;
  }, [rowClasses, innerGridRef]);

  // Update row classes dynamically whenever a new prop is passed in
  useEffect(function () {
    if (rowClasses) {
      rowIdToElements.current.forEach(function (rowElement, rowIndex) {
        if (rowClasses[rowIndex]) {
          rowElement.classList.value = "euiDataGridRow ".concat(rowClasses[rowIndex]);
        } else {
          rowElement.classList.value = 'euiDataGridRow'; // Clear any added classes
        }
      });
    }
  }, [rowClasses]);
  return {
    getRow: getRow
  };
};