function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { css } from '@emotion/react';
var _ref = process.env.NODE_ENV === "production" ? {
  name: "uacjc5-inherit",
  styles: "color:inherit;label:inherit;"
} : {
  name: "uacjc5-inherit",
  styles: "color:inherit;label:inherit;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
export var euiTextColorStyles = function euiTextColorStyles(_ref2) {
  var euiTheme = _ref2.euiTheme;
  return {
    euiTextColor: /*#__PURE__*/css(";label:euiTextColor;"),
    default: /*#__PURE__*/css("color:", euiTheme.colors.text, ";;label:default;"),
    subdued: /*#__PURE__*/css("color:", euiTheme.colors.subduedText, ";;label:subdued;"),
    success: /*#__PURE__*/css("color:", euiTheme.colors.successText, ";;label:success;"),
    accent: /*#__PURE__*/css("color:", euiTheme.colors.accentText, ";;label:accent;"),
    danger: /*#__PURE__*/css("color:", euiTheme.colors.dangerText, ";;label:danger;"),
    warning: /*#__PURE__*/css("color:", euiTheme.colors.warningText, ";;label:warning;"),
    ghost: /*#__PURE__*/css("color:", euiTheme.colors.ghost, "!important;;label:ghost;"),
    inherit: _ref,
    customColor: /*#__PURE__*/css(";label:customColor;") // Handled by `style` tag - this is just here for a className hook
  };
};