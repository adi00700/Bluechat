import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/// <reference types="cypress" />
/// <reference types="cypress-real-events" />
/// <reference types="../../../cypress/support" />

import React, { useState } from 'react';
import { EuiContextMenuItem } from '../context_menu';
import { EuiNotificationEvent } from './notification_event';
import { EuiPanel } from '../panel';
import { jsx as ___EmotionJSX } from "@emotion/react";
var NotificationEvent = function NotificationEvent() {
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isRead = _useState2[0],
    setIsRead = _useState2[1];
  var onRead = function onRead(id, isRead) {
    setIsRead(!isRead);
  };
  var onOpenContextMenu = function onOpenContextMenu(id) {
    return [___EmotionJSX(EuiContextMenuItem, {
      key: "contextMenuItemA",
      onClick: function onClick() {
        return onRead(id, isRead);
      }
    }, isRead ? 'Mark as unread' : 'Mark as read'), ___EmotionJSX(EuiContextMenuItem, {
      key: "contextMenuItemB",
      onClick: function onClick() {}
    }, "View messages like this"), ___EmotionJSX(EuiContextMenuItem, {
      key: "contextMenuItemC",
      onClick: function onClick() {}
    }, "Don\u2019t notify me about this")];
  };
  return ___EmotionJSX(EuiPanel, {
    paddingSize: "none",
    hasShadow: true,
    style: {
      maxWidth: '540px'
    }
  }, ___EmotionJSX(EuiNotificationEvent, {
    id: "cy-eui-notification-1",
    type: "Report",
    iconType: "logoKibana",
    iconAriaLabel: "Kibana",
    time: "1 min ago",
    title: "[Error Monitoring Report] is generated",
    primaryAction: "Download",
    primaryActionProps: {
      iconType: 'download'
    },
    messages: ['The reported was generated at 17:12:16 GMT+4'],
    isRead: isRead,
    onRead: onRead,
    onOpenContextMenu: onOpenContextMenu,
    onClickPrimaryAction: function onClickPrimaryAction() {},
    onClickTitle: function onClickTitle() {}
  }));
};
describe('EuiNotificationEvent', function () {
  beforeEach(function () {
    cy.viewport(1024, 768); // medium breakpoint
    cy.realMount(___EmotionJSX(NotificationEvent, null));
    cy.get('article.euiNotificationEvent').should('exist');
  });
  describe('Automated accessibility check', function () {
    it('has zero violations on first render', function () {
      cy.checkAxe();
    });
    it('has zero violations when popover is open', function () {
      cy.get('button[data-test-subj="cy-eui-notification-1-notificationEventMetaButton"]').realClick();
      cy.get('div.euiPopover__panel').should('exist');
      cy.checkAxe();
    });
    it('has zero violations after the Mark as read button is clicked', function () {
      cy.get('button[data-test-subj="cy-eui-notification-1-notificationEventMetaButton"]').realClick();
      cy.get('div.euiPopover__panel').should('exist');
      cy.get('div.euiPopover__panel button').first().realClick();
      cy.checkAxe();
    });
  });
  describe('Keyboard accessibility', function () {
    it('has zero violations when the popover is opened by keyboard', function () {
      cy.repeatRealPress('Tab');
      cy.get('button[data-test-subj="cy-eui-notification-1-notificationEventMetaButton"]').should('have.focus');
      cy.realPress('Enter');
      cy.get('div.euiPopover__panel').should('exist');
      cy.checkAxe();
      cy.realPress('Escape');
      cy.get('div.euiPopover__panel').should('not.exist');
      cy.checkAxe();
    });
  });
});