"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCopy = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _inner_text = require("../inner_text");
var _copy = require("../copy");
var _i18n = require("../i18n");
var _button = require("../button");
var _utils = require("./utils");
var _react2 = require("@emotion/react");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/**
 * Hook that returns copy-related state/logic/utils
 */
var useCopy = function useCopy(_ref) {
  var isCopyable = _ref.isCopyable,
    isVirtualized = _ref.isVirtualized,
    children = _ref.children;
  var _useInnerText = (0, _inner_text.useInnerText)(''),
    _useInnerText2 = (0, _slicedToArray2.default)(_useInnerText, 2),
    innerTextRef = _useInnerText2[0],
    _innerText = _useInnerText2[1];
  var innerText = (0, _react.useMemo)(function () {
    return (_innerText
    // Normalize line terminations to match native JS format
    === null || _innerText
    // Normalize line terminations to match native JS format
    === void 0 ? void 0 : _innerText
    // Normalize line terminations to match native JS format
    .replace(_utils.NEW_LINE_REGEX_GLOBAL, '\n')
    // Reduce two or more consecutive new line characters to a single one
    // This is needed primarily because of how syntax highlighting
    // generated DOM elements affect `innerText` output.
    .replace(/\n{2,}/g, '\n')) || '';
  }, [_innerText]);
  var textToCopy = isVirtualized ? "".concat(children) : innerText; // Virtualized code blocks do not have inner text

  var showCopyButton = isCopyable && textToCopy;
  var copyAriaLabel = (0, _i18n.useEuiI18n)('euiCodeBlockCopy.copy', 'Copy');
  var copyButton = (0, _react.useMemo)(function () {
    return showCopyButton ? (0, _react2.jsx)("div", {
      className: "euiCodeBlock__copyButton"
    }, (0, _react2.jsx)(_copy.EuiCopy, {
      textToCopy: textToCopy
    }, function (copy) {
      return (0, _react2.jsx)(_button.EuiButtonIcon, {
        onClick: copy,
        iconType: "copyClipboard",
        color: "text",
        "aria-label": copyAriaLabel,
        "data-test-subj": "euiCodeBlockCopy"
      });
    })) : null;
  }, [showCopyButton, textToCopy, copyAriaLabel]);
  return {
    innerTextRef: innerTextRef,
    copyButton: copyButton
  };
};
exports.useCopy = useCopy;